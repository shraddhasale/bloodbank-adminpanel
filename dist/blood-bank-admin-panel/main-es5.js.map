{"version":3,"sources":["webpack:///src/app/shared/services/toast.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/shared/interceptors/auth.interceptor.ts","webpack:///src/app/shared/services/auth.service.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/constants/http.constant.ts","webpack:///src/app/shared/guard/auth.guard.ts","webpack:///src/app/constants/storage-key.constant.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/shared/models/toast.model.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["ToastService","_router","pushToastSubject","keepAfterRouteChange","events","subscribe","event","removeAllToast","asObservable","type","message","title","toast","next","showToast","SUCCESS","ERROR","INFO","WARNING","providedIn","environment","production","websiteNodeHost","apiKey","AuthInterceptor","_auth","request","clone","setHeaders","getToken","isUserAuthenticated","updateRequestToken","handle","pipe","error","status","TOKEN_EXPIRED","token","newToken","setToken","FORBIDDEN","navigate","newEvent","body","AuthService","_toast","currentUser","JSON","parse","localStorage","getItem","auth","user","setItem","stringify","removeItem","getCurrentUser","setCurrentUser","allowedVendorCodes","length","allowedCountries","AppComponent","_cs","window","performance","navigation","clearLocalStorage","clear","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","imports","providers","bootstrap","HttpError","AuthGuard","router","childRoute","state","SESSION_STORAGE_KEY","LOCAL_STORAGE_KEY","menuSelected","subMenuSelected","routes","path","loadChildren","then","m","AuthModule","LayoutModule","canLoad","AppRoutingModule","forRoot","exports","ToastType","bootstrapModule","err","console","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Subject } from 'rxjs';\n\nimport { ToastI, ToastType } from '../models/toast.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  private pushToastSubject = new Subject<ToastI>();\n  public keepAfterRouteChange = true;\n\n  constructor(public _router: Router) {\n    // clear toast messages on route change unless 'keepAfterRouteChange' flag is true  \n    _router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        if (!this.keepAfterRouteChange) {\n          this.removeAllToast();\n        }\n      }\n    });\n  }\n\n  /**\n   * @description It is used to get the observable which sends the Toast Config object\n   *\n   * @returns\n   * @memberof ToastService\n   */\n  getObservable() {\n    return this.pushToastSubject.asObservable();\n  }\n\n\n  /**\n   * @description It is used to send toast config to Toast component,\n   * which is used to display toast on DOM.\n   *\n   * @private\n   * @param {ToastType} type\n   * @param {string} message\n   * @param {string} title\n   * @memberof ToastService\n   */\n  private showToast(type: ToastType, message: string, title: string) {\n    const toast: ToastI = {\n      type,\n      title,\n      message\n    };\n    this.pushToastSubject.next(toast);\n  }\n\n  /**\n   * @description it shows the Success toast \n   *\n   * @param {string} message\n   * @param {string} [title='Success']\n   * @memberof ToastService\n   */\n  success(message: string, title: string = 'Success') {\n    this.showToast(ToastType.SUCCESS, message, title);\n  }\n\n  /**\n   * @description it shows the Error toast\n   *\n   * @param {string} message\n   * @param {string} [title='Error']\n   * @memberof ToastService\n   */\n  error(message: string, title: string = 'Error') {\n    this.showToast(ToastType.ERROR, message, title);\n  }\n\n  /**\n   * @description it shows the Info toast\n   *\n   * @param {string} message\n   * @param {string} [title='Info']\n   * @memberof ToastService\n   */\n  info(message: string, title: string = 'Info') {\n    this.showToast(ToastType.INFO, message, title);\n  }\n\n  /**\n   * @description it shows the Warning toast.\n   *\n   * @param {string} message\n   * @param {string} [title='Warning']\n   * @memberof ToastService\n   */\n  warning(message: string, title: string = 'Warning') {\n    this.showToast(ToastType.WARNING, message, title);\n  }\n\n  /**\n   * @description it clears all the toast from screen\n   *\n   * @memberof ToastService\n   */\n  removeAllToast() {\n    this.pushToastSubject.next();\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\n\nexport const environment = {\n  production: false,\n  websiteNodeHost: 'http://65.0.182.136:3000',\n  //websiteNodeHost: 'http://soc-dev.myglamm.net:9057', // baseUrl for node APIs\n  apiKey: 'sywSAQ85Q45vwsUcOjQw2kFm4ERpSAE7', // API key to let ACL know Nucleus is making request\n};\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { AuthService } from '../services/auth.service';\nimport { HttpError } from '@const/http.constant';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private _auth: AuthService, private _router: Router) {}\n\n  updateRequestToken(request: HttpRequest<any>) {\n    return request.clone({\n      setHeaders: {\n        'token': this._auth.getToken()\n      }\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // If token is present then set header for auth token\n    if (this._auth.isUserAuthenticated()) {\n      request = this.updateRequestToken(request);\n    }\n\n    return next.handle(request).pipe(\n      // NOTE: For Token Expired we need to refresh the token\n      catchError((error: HttpErrorResponse) => {\n        switch (error.status) {\n          // Handling token expiry\n          case HttpError.TOKEN_EXPIRED:\n            let token = error.error.newToken;\n            this._auth.setToken(token);\n            request = this.updateRequestToken(request);\n            return next.handle(request);\n            break;\n          // Handling unauthorized user\n          case HttpError.FORBIDDEN:\n            this._router.navigate(['/unauthorized']);\n            return new Observable();\n            break;\n          default:\n            throw error.error;\n            break;\n        }\n      }),\n      map((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          let newEvent: HttpEvent<any>;\n          // alter response here. maybe do the following\n          newEvent = event.clone({\n            // alter event params here\n            body: event.body\n          });\n          return newEvent;\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { UserI } from '../models/user.model';\nimport { ToastService } from './toast.service';\nimport { LOCAL_STORAGE_KEY } from '@const/storage-key.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private _toast: ToastService) {}\n  /**\n   * @description it provides the user object\n   * user is saved in session storage and can be accessed directly in each component.\n   * But we don't want components to directly access user's details via session storage,\n   * hence we created this method\n   *\n   * @returns {UserI}\n   * @memberof AuthService\n   */\n  getCurrentUser(): UserI {\n    const currentUser = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY.auth.user)\n    );\n    if (!currentUser) {\n      this._toast.error('Please login again', 'Invalid User');\n    }\n    return currentUser;\n  }\n\n  /**\n   * @description it stores user details in the session storage\n   * TODO: Check once the App dev is done, should be avoid using session storage\n   * and store user in a private user variable\n   *\n   * TODO: redirect user to login page if user is invalid\n   *\n   * @param {UserI} user\n   * @memberof AuthService\n   */\n  setCurrentUser(user: UserI) {\n    localStorage.setItem(LOCAL_STORAGE_KEY.auth.user, JSON.stringify(user));\n  }\n\n  /**\n   * @description it clears the user details from session storage\n   *\n   * @memberof AuthService\n   */\n  clearCurrentUser() {\n    localStorage.removeItem(LOCAL_STORAGE_KEY.auth.user);\n  }\n\n  /**\n   * @description it tells whether user is logged in\n   *\n   * @returns {boolean}\n   * @memberof AuthService\n   */\n  isUserAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  /**\n   * @description it gives access token for current user\n   *\n   * @returns {string}\n   * @memberof AuthService\n   */\n  getToken(): string {\n    const currentUser = this.getCurrentUser();\n    if (!currentUser || !currentUser.token) {\n      this._toast.error('Please login again', 'Invalid Token');\n      return null;\n    }\n    return currentUser.token;\n  }\n\n  /**\n   * @description here we are updating the token.\n   * We also make sure that user properties other than token\n   * should also persist\n   *\n   * @param {string} token\n   * @memberof AuthService\n   */\n  setToken(token: string) {\n    let user = this.getCurrentUser();\n    user.token = token;\n    this.setCurrentUser(user);\n  }\n\n  /**\n   * @description it gives a single vendor code assigned for the loggedIn user\n   *  TODO: redirect user to login page is vendor code is invalid\n   *\n   * @returns {string}\n   * @memberof AuthService\n   */\n  getVendorCode(): string {\n    const currentUser = this.getCurrentUser();\n    if (\n      !currentUser || !currentUser.allowedVendorCodes ||\n      !currentUser.allowedVendorCodes.length\n    ) {\n      this._toast.error('Please login again', 'Invalid Vendor Code');\n      return null;\n    }\n    // NOTE: @sumit has made it sure that we will get only single vendor code per user\n    // but for future they have kept the data type as array\n    return currentUser.allowedVendorCodes[0];\n  }\n\n  /**\n   * @description it gives the list of countries the current user is allowed to access\n   *\n   * TODO: if there are no allowed countries then logout and redirect to login screen\n   *\n   * @returns {string[]}\n   * @memberof AuthService\n   */\n  getUserAllowedCountries(): string[] {\n    const currentUser = this.getCurrentUser();\n    if (!currentUser.allowedCountries || !currentUser.allowedCountries.length) {\n      this._toast.error(\n        'User has no access to countries. Please login again',\n        'No allowed countries'\n      );\n      return null;\n    }\n    return currentUser.allowedCountries;\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { AuthService } from '@shared/services/auth.service';\nimport { LOCAL_STORAGE_KEY } from '@const/storage-key.constant';\nimport {CookieService} from 'ngx-cookie-service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'plixxo-admin-panel';\n  constructor(\n    private _auth: AuthService,\n    private _cs: CookieService,\n  ) {}\n  ngOnInit() {\n    \n    // Note: check if page is refreshed or user came from another route to handle browser/tab close\n    if (window.performance) {\n      if (performance.navigation.type !== 1) {\n        this.clearLocalStorage();\n      }\n    }\n  }\n\n  clearLocalStorage() {\n    const currentUser = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY.auth.user)\n    );\n    localStorage.clear();\n    this._auth.setCurrentUser(currentUser);\n  }\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AuthInterceptor } from './shared/interceptors/auth.interceptor';\nimport { AppComponent } from './app.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    \n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export enum HttpError {\n  TOKEN_EXPIRED = 498,\n  VALIDATION_ERROR = 422,\n  FORBIDDEN = 403\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanLoad, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanLoad, CanActivateChild {\n  constructor(\n    private router: Router,\n    private _auth: AuthService\n  ) { }\n\n  canLoad() {\n    if (this._auth.isUserAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/auth']);\n    return false;\n  }\n\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this._auth.isUserAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/auth']);\n    return false;\n  }\n}\n","export const SESSION_STORAGE_KEY = {};\n\nexport const LOCAL_STORAGE_KEY = {\n  auth: {\n    user: 'currentUser'\n  },\n  navigation: {\n    menuSelected: 'menuSelected',\n    subMenuSelected: 'subMenuSelected'\n  },\n \n};\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from './shared/guard/auth.guard';\nconst routes: Routes = [\n  {\n    path: 'auth',\n    loadChildren: () => import('./auth/auth.module').then((m) => m.AuthModule)\n  },\n  {\n    path: '',\n    loadChildren: () =>\n      import('./layout/layout.module').then((m) => m.LayoutModule),\n      canLoad: [AuthGuard]\n  },\n  \n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export interface ToastI {\n    type: ToastType,\n    title: string,\n    message: string\n}\n\nexport enum ToastType {\n    SUCCESS,\n    ERROR,\n    INFO,\n    WARNING\n} ","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}