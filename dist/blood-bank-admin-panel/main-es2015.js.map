{"version":3,"sources":["./src/app/shared/services/toast.service.ts","./src/environments/environment.ts","./src/app/shared/interceptors/auth.interceptor.ts","./src/app/shared/services/auth.service.ts","./src/app/pages/blood-bank/blood-bank.component.ts","./src/app/pages/blood-bank/blood-bank.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/constants/http.constant.ts","./src/app/shared/guard/auth.guard.ts","./src/app/constants/storage-key.constant.ts","./src/app/app-routing.module.ts","./src/app/shared/models/toast.model.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACe;AAC3B;AAE2B;;;AAKnD,MAAM,YAAY;IAKvB,YAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAH1B,qBAAgB,GAAG,IAAI,4CAAO,EAAU,CAAC;QAC1C,yBAAoB,GAAG,IAAI,CAAC;QAGjC,oFAAoF;QACpF,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YAC/B,IAAI,KAAK,YAAY,+DAAe,EAAE;gBACpC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAC9B,IAAI,CAAC,cAAc,EAAE,CAAC;iBACvB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,aAAa;QACX,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;IAC9C,CAAC;IAGD;;;;;;;;;OASG;IACK,SAAS,CAAC,IAAe,EAAE,OAAe,EAAE,KAAa;QAC/D,MAAM,KAAK,GAAW;YACpB,IAAI;YACJ,KAAK;YACL,OAAO;SACR,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;OAMG;IACH,OAAO,CAAC,OAAe,EAAE,QAAgB,SAAS;QAChD,IAAI,CAAC,SAAS,CAAC,6DAAS,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,OAAe,EAAE,QAAgB,OAAO;QAC5C,IAAI,CAAC,SAAS,CAAC,6DAAS,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;OAMG;IACH,IAAI,CAAC,OAAe,EAAE,QAAgB,MAAM;QAC1C,IAAI,CAAC,SAAS,CAAC,6DAAS,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;OAMG;IACH,OAAO,CAAC,OAAe,EAAE,QAAgB,SAAS;QAChD,IAAI,CAAC,SAAS,CAAC,6DAAS,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;IACpD,CAAC;IAED;;;;OAIG;IACH,cAAc;QACZ,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;;wEAjGU,YAAY;+FAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;6FAEP,YAAY;cAHxB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAGzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,eAAe,EAAE,0BAA0B;IAC3C,8EAA8E;IAC9E,MAAM,EAAE,kCAAkC;CAC3C,CAAC;AACF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;AClBnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAQb;AAGI;AACe;AAGA;;;;AAG1C,MAAM,eAAe;IAC1B,YAAoB,KAAkB,EAAU,OAAe;QAA3C,UAAK,GAAL,KAAK,CAAa;QAAU,YAAO,GAAP,OAAO,CAAQ;IAAG,CAAC;IAEnE,kBAAkB,CAAC,OAAyB;QAC1C,OAAO,OAAO,CAAC,KAAK,CAAC;YACnB,UAAU,EAAE;gBACV,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;aAC/B;SACF,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CACP,OAAyB,EACzB,IAAiB;QAEjB,qDAAqD;QACrD,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,EAAE;YACpC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;SAC5C;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI;QAC9B,uDAAuD;QACvD,iEAAU,CAAC,CAAC,KAAwB,EAAE,EAAE;YACtC,QAAQ,KAAK,CAAC,MAAM,EAAE;gBACpB,wBAAwB;gBACxB,KAAK,8DAAS,CAAC,aAAa;oBAC1B,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;oBACjC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAC3B,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;oBAC3C,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;oBAC5B,MAAM;gBACR,6BAA6B;gBAC7B,KAAK,8DAAS,CAAC,SAAS;oBACtB,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;oBACzC,OAAO,IAAI,+CAAU,EAAE,CAAC;oBACxB,MAAM;gBACR;oBACE,MAAM,KAAK,CAAC,KAAK,CAAC;oBAClB,MAAM;aACT;QACH,CAAC,CAAC,EACF,0DAAG,CAAC,CAAC,KAAqB,EAAE,EAAE;YAC5B,IAAI,KAAK,YAAY,iEAAY,EAAE;gBACjC,IAAI,QAAwB,CAAC;gBAC7B,8CAA8C;gBAC9C,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;oBACrB,0BAA0B;oBAC1B,IAAI,EAAE,KAAK,CAAC,IAAI;iBACjB,CAAC,CAAC;gBACH,OAAO,QAAQ,CAAC;aACjB;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;8EArDU,eAAe;kGAAf,eAAe,WAAf,eAAe;6FAAf,eAAe;cAD3B,wDAAU;;;;;;;;;;;;;;ACjBX;AAAA;AAAA;AAAA;AAAA;AAA2C;AAIqB;;;AAKzD,MAAM,WAAW;IACtB,YAAoB,MAAoB;QAApB,WAAM,GAAN,MAAM,CAAc;IAAG,CAAC;IAC5C;;;;;;;;OAQG;IACH,cAAc;QACZ,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAC5B,YAAY,CAAC,OAAO,CAAC,6EAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAClD,CAAC;QACF,IAAI,CAAC,WAAW,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,cAAc,CAAC,CAAC;SACzD;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;;;;;;;;OASG;IACH,cAAc,CAAC,IAAW;QACxB,YAAY,CAAC,OAAO,CAAC,6EAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED;;;;OAIG;IACH,gBAAgB;QACd,YAAY,CAAC,UAAU,CAAC,6EAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACH,mBAAmB;QACjB,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAED;;;;;OAKG;IACH,QAAQ;QACN,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1C,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAAC;YACzD,OAAO,IAAI,CAAC;SACb;QACD,OAAO,WAAW,CAAC,KAAK,CAAC;IAC3B,CAAC;IAED;;;;;;;OAOG;IACH,QAAQ,CAAC,KAAa;QACpB,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;;OAMG;IACH,aAAa;QACX,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1C,IACE,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,kBAAkB;YAC/C,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,EACtC;YACA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,qBAAqB,CAAC,CAAC;YAC/D,OAAO,IAAI,CAAC;SACb;QACD,kFAAkF;QAClF,uDAAuD;QACvD,OAAO,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;;OAOG;IACH,uBAAuB;QACrB,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1C,IAAI,CAAC,WAAW,CAAC,gBAAgB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE;YACzE,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,qDAAqD,EACrD,sBAAsB,CACvB,CAAC;YACF,OAAO,IAAI,CAAC;SACb;QACD,OAAO,WAAW,CAAC,gBAAgB,CAAC;IACtC,CAAC;;sEA1HU,WAAW;8FAAX,WAAW,WAAX,WAAW,mBAFV,MAAM;6FAEP,WAAW;cAHvB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAkD;;AAO3C,MAAM,kBAAkB;IAE7B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;oFALU,kBAAkB;kGAAlB,kBAAkB;QCP/B,oEAAG;QAAA,4EAAiB;QAAA,4DAAI;;6FDOX,kBAAkB;cAL9B,uDAAS;eAAC;gBACT,QAAQ,EAAE,gBAAgB;gBAC1B,WAAW,EAAE,6BAA6B;gBAC1C,SAAS,EAAE,CAAC,6BAA6B,CAAC;aAC3C;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AAGsB;;;;;AAOzD,MAAM,YAAY;IAEvB,YACU,KAAkB,EAClB,GAAkB;QADlB,UAAK,GAAL,KAAK,CAAa;QAClB,QAAG,GAAH,GAAG,CAAe;QAH5B,UAAK,GAAG,oBAAoB,CAAC;IAI1B,CAAC;IACJ,QAAQ;QAEN,+FAA+F;QAC/F,IAAI,MAAM,CAAC,WAAW,EAAE;YACtB,IAAI,WAAW,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,EAAE;gBACrC,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC1B;SACF;IACH,CAAC;IAED,iBAAiB;QACf,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAC5B,YAAY,CAAC,OAAO,CAAC,6EAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAClD,CAAC;QACF,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;;wEAtBU,YAAY;4FAAZ,YAAY;QCVzB,2EAA+B;;6FDUlB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACkC;AACnB;AACiB;AAC1B;AAC8B;;AAmBtE,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBANT;QACT,EAAE,OAAO,EAAE,sEAAiB,EAAE,QAAQ,EAAE,qFAAe,EAAE,KAAK,EAAE,IAAI,EAAE;KAEvE,YARQ;YACP,uEAAa;YACb,oEAAgB;YAChB,qEAAgB;SACjB;mIAOU,SAAS,mBAflB,2DAAY;QACZ,yFAAkB,aAIlB,uEAAa;QACb,oEAAgB;QAChB,qEAAgB;6FAQP,SAAS;cAjBrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,yFAAkB;iBAEnB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,qEAAgB;iBACjB;gBACD,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,sEAAiB,EAAE,QAAQ,EAAE,qFAAe,EAAE,KAAK,EAAE,IAAI,EAAE;iBAEvE;gBACD,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACxBD;AAAA;AAAA,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,6DAAmB;IACnB,mEAAsB;IACtB,qDAAe;AACjB,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAA2C;;;;AASpC,MAAM,SAAS;IACpB,YACU,MAAc,EACd,KAAkB;QADlB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAa;IACxB,CAAC;IAEL,OAAO;QACL,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,EAAE;YACpC,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAChC,OAAO,KAAK,CAAC;IACf,CAAC;IAGD,gBAAgB,CACd,UAAkC,EAClC,KAA0B;QAC1B,IAAI,IAAI,CAAC,KAAK,CAAC,mBAAmB,EAAE,EAAE;YACpC,OAAO,IAAI,CAAC;SACb;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QAChC,OAAO,KAAK,CAAC;IACf,CAAC;;kEAvBU,SAAS;4FAAT,SAAS,WAAT,SAAS,mBAFR,MAAM;6FAEP,SAAS;cAHrB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAO,MAAM,mBAAmB,GAAG,EAAE,CAAC;AAE/B,MAAM,iBAAiB,GAAG;IAC/B,IAAI,EAAE;QACJ,IAAI,EAAE,aAAa;KACpB;IACD,UAAU,EAAE;QACV,YAAY,EAAE,cAAc;QAC5B,eAAe,EAAE,iBAAiB;KACnC;CAEF,CAAC;;;;;;;;;;;;;ACXF;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACD;;;AACtD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,MAAM;QACZ,YAAY,EAAE,GAAG,EAAE,CAAC,yOAA4B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;KAC3E;IACD;QACE,IAAI,EAAE,EAAE;QACR,YAAY,EAAE,GAAG,EAAE,CACjB,qPAAgC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC;QAC5D,OAAO,EAAE,CAAC,kEAAS,CAAC;KACvB;CAEF,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACdD;AAAA;AAAA,IAAY,SAKX;AALD,WAAY,SAAS;IACjB,+CAAO;IACP,2CAAK;IACL,yCAAI;IACJ,+CAAO;AACX,CAAC,EALW,SAAS,KAAT,SAAS,QAKpB;;;;;;;;;;;;;ACXD;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Subject } from 'rxjs';\n\nimport { ToastI, ToastType } from '../models/toast.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  private pushToastSubject = new Subject<ToastI>();\n  public keepAfterRouteChange = true;\n\n  constructor(public _router: Router) {\n    // clear toast messages on route change unless 'keepAfterRouteChange' flag is true  \n    _router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        if (!this.keepAfterRouteChange) {\n          this.removeAllToast();\n        }\n      }\n    });\n  }\n\n  /**\n   * @description It is used to get the observable which sends the Toast Config object\n   *\n   * @returns\n   * @memberof ToastService\n   */\n  getObservable() {\n    return this.pushToastSubject.asObservable();\n  }\n\n\n  /**\n   * @description It is used to send toast config to Toast component,\n   * which is used to display toast on DOM.\n   *\n   * @private\n   * @param {ToastType} type\n   * @param {string} message\n   * @param {string} title\n   * @memberof ToastService\n   */\n  private showToast(type: ToastType, message: string, title: string) {\n    const toast: ToastI = {\n      type,\n      title,\n      message\n    };\n    this.pushToastSubject.next(toast);\n  }\n\n  /**\n   * @description it shows the Success toast \n   *\n   * @param {string} message\n   * @param {string} [title='Success']\n   * @memberof ToastService\n   */\n  success(message: string, title: string = 'Success') {\n    this.showToast(ToastType.SUCCESS, message, title);\n  }\n\n  /**\n   * @description it shows the Error toast\n   *\n   * @param {string} message\n   * @param {string} [title='Error']\n   * @memberof ToastService\n   */\n  error(message: string, title: string = 'Error') {\n    this.showToast(ToastType.ERROR, message, title);\n  }\n\n  /**\n   * @description it shows the Info toast\n   *\n   * @param {string} message\n   * @param {string} [title='Info']\n   * @memberof ToastService\n   */\n  info(message: string, title: string = 'Info') {\n    this.showToast(ToastType.INFO, message, title);\n  }\n\n  /**\n   * @description it shows the Warning toast.\n   *\n   * @param {string} message\n   * @param {string} [title='Warning']\n   * @memberof ToastService\n   */\n  warning(message: string, title: string = 'Warning') {\n    this.showToast(ToastType.WARNING, message, title);\n  }\n\n  /**\n   * @description it clears all the toast from screen\n   *\n   * @memberof ToastService\n   */\n  removeAllToast() {\n    this.pushToastSubject.next();\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\n\nexport const environment = {\n  production: false,\n  websiteNodeHost: 'http://52.66.15.237:3000',\n  //websiteNodeHost: 'http://soc-dev.myglamm.net:9057', // baseUrl for node APIs\n  apiKey: 'sywSAQ85Q45vwsUcOjQw2kFm4ERpSAE7', // API key to let ACL know Nucleus is making request\n};\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n\n","import { Injectable } from '@angular/core';\nimport {\n  HttpInterceptor,\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { AuthService } from '../services/auth.service';\nimport { HttpError } from '@const/http.constant';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private _auth: AuthService, private _router: Router) {}\n\n  updateRequestToken(request: HttpRequest<any>) {\n    return request.clone({\n      setHeaders: {\n        'token': this._auth.getToken()\n      }\n    });\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // If token is present then set header for auth token\n    if (this._auth.isUserAuthenticated()) {\n      request = this.updateRequestToken(request);\n    }\n\n    return next.handle(request).pipe(\n      // NOTE: For Token Expired we need to refresh the token\n      catchError((error: HttpErrorResponse) => {\n        switch (error.status) {\n          // Handling token expiry\n          case HttpError.TOKEN_EXPIRED:\n            let token = error.error.newToken;\n            this._auth.setToken(token);\n            request = this.updateRequestToken(request);\n            return next.handle(request);\n            break;\n          // Handling unauthorized user\n          case HttpError.FORBIDDEN:\n            this._router.navigate(['/unauthorized']);\n            return new Observable();\n            break;\n          default:\n            throw error.error;\n            break;\n        }\n      }),\n      map((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          let newEvent: HttpEvent<any>;\n          // alter response here. maybe do the following\n          newEvent = event.clone({\n            // alter event params here\n            body: event.body\n          });\n          return newEvent;\n        }\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { UserI } from '../models/user.model';\nimport { ToastService } from './toast.service';\nimport { LOCAL_STORAGE_KEY } from '@const/storage-key.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private _toast: ToastService) {}\n  /**\n   * @description it provides the user object\n   * user is saved in session storage and can be accessed directly in each component.\n   * But we don't want components to directly access user's details via session storage,\n   * hence we created this method\n   *\n   * @returns {UserI}\n   * @memberof AuthService\n   */\n  getCurrentUser(): UserI {\n    const currentUser = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY.auth.user)\n    );\n    if (!currentUser) {\n      this._toast.error('Please login again', 'Invalid User');\n    }\n    return currentUser;\n  }\n\n  /**\n   * @description it stores user details in the session storage\n   * TODO: Check once the App dev is done, should be avoid using session storage\n   * and store user in a private user variable\n   *\n   * TODO: redirect user to login page if user is invalid\n   *\n   * @param {UserI} user\n   * @memberof AuthService\n   */\n  setCurrentUser(user: UserI) {\n    localStorage.setItem(LOCAL_STORAGE_KEY.auth.user, JSON.stringify(user));\n  }\n\n  /**\n   * @description it clears the user details from session storage\n   *\n   * @memberof AuthService\n   */\n  clearCurrentUser() {\n    localStorage.removeItem(LOCAL_STORAGE_KEY.auth.user);\n  }\n\n  /**\n   * @description it tells whether user is logged in\n   *\n   * @returns {boolean}\n   * @memberof AuthService\n   */\n  isUserAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  /**\n   * @description it gives access token for current user\n   *\n   * @returns {string}\n   * @memberof AuthService\n   */\n  getToken(): string {\n    const currentUser = this.getCurrentUser();\n    if (!currentUser || !currentUser.token) {\n      this._toast.error('Please login again', 'Invalid Token');\n      return null;\n    }\n    return currentUser.token;\n  }\n\n  /**\n   * @description here we are updating the token.\n   * We also make sure that user properties other than token\n   * should also persist\n   *\n   * @param {string} token\n   * @memberof AuthService\n   */\n  setToken(token: string) {\n    let user = this.getCurrentUser();\n    user.token = token;\n    this.setCurrentUser(user);\n  }\n\n  /**\n   * @description it gives a single vendor code assigned for the loggedIn user\n   *  TODO: redirect user to login page is vendor code is invalid\n   *\n   * @returns {string}\n   * @memberof AuthService\n   */\n  getVendorCode(): string {\n    const currentUser = this.getCurrentUser();\n    if (\n      !currentUser || !currentUser.allowedVendorCodes ||\n      !currentUser.allowedVendorCodes.length\n    ) {\n      this._toast.error('Please login again', 'Invalid Vendor Code');\n      return null;\n    }\n    // NOTE: @sumit has made it sure that we will get only single vendor code per user\n    // but for future they have kept the data type as array\n    return currentUser.allowedVendorCodes[0];\n  }\n\n  /**\n   * @description it gives the list of countries the current user is allowed to access\n   *\n   * TODO: if there are no allowed countries then logout and redirect to login screen\n   *\n   * @returns {string[]}\n   * @memberof AuthService\n   */\n  getUserAllowedCountries(): string[] {\n    const currentUser = this.getCurrentUser();\n    if (!currentUser.allowedCountries || !currentUser.allowedCountries.length) {\n      this._toast.error(\n        'User has no access to countries. Please login again',\n        'No allowed countries'\n      );\n      return null;\n    }\n    return currentUser.allowedCountries;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-blood-bank',\n  templateUrl: './blood-bank.component.html',\n  styleUrls: ['./blood-bank.component.scss']\n})\nexport class BloodBankComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>blood-bank works!</p>\n","import { Component } from '@angular/core';\n\nimport { AuthService } from '@shared/services/auth.service';\nimport { LOCAL_STORAGE_KEY } from '@const/storage-key.constant';\nimport {CookieService} from 'ngx-cookie-service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'plixxo-admin-panel';\n  constructor(\n    private _auth: AuthService,\n    private _cs: CookieService,\n  ) {}\n  ngOnInit() {\n    \n    // Note: check if page is refreshed or user came from another route to handle browser/tab close\n    if (window.performance) {\n      if (performance.navigation.type !== 1) {\n        this.clearLocalStorage();\n      }\n    }\n  }\n\n  clearLocalStorage() {\n    const currentUser = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY.auth.user)\n    );\n    localStorage.clear();\n    this._auth.setCurrentUser(currentUser);\n  }\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AuthInterceptor } from './shared/interceptors/auth.interceptor';\nimport { AppComponent } from './app.component';\nimport { BloodBankComponent } from './pages/blood-bank/blood-bank.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BloodBankComponent,\n    \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\n    \n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export enum HttpError {\n  TOKEN_EXPIRED = 498,\n  VALIDATION_ERROR = 422,\n  FORBIDDEN = 403\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanLoad, CanActivateChild, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanLoad, CanActivateChild {\n  constructor(\n    private router: Router,\n    private _auth: AuthService\n  ) { }\n\n  canLoad() {\n    if (this._auth.isUserAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/auth']);\n    return false;\n  }\n\n\n  canActivateChild(\n    childRoute: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n    if (this._auth.isUserAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/auth']);\n    return false;\n  }\n}\n","export const SESSION_STORAGE_KEY = {};\n\nexport const LOCAL_STORAGE_KEY = {\n  auth: {\n    user: 'currentUser'\n  },\n  navigation: {\n    menuSelected: 'menuSelected',\n    subMenuSelected: 'subMenuSelected'\n  },\n \n};\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from './shared/guard/auth.guard';\nconst routes: Routes = [\n  {\n    path: 'auth',\n    loadChildren: () => import('./auth/auth.module').then((m) => m.AuthModule)\n  },\n  {\n    path: '',\n    loadChildren: () =>\n      import('./layout/layout.module').then((m) => m.LayoutModule),\n      canLoad: [AuthGuard]\n  },\n  \n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export interface ToastI {\n    type: ToastType,\n    title: string,\n    message: string\n}\n\nexport enum ToastType {\n    SUCCESS,\n    ERROR,\n    INFO,\n    WARNING\n} ","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}